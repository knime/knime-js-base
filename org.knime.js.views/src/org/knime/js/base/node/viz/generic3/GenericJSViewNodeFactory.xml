<?xml version="1.0" encoding="utf-8"?>
<knimeNode icon="../js.png" type="Visualizer" xmlns="http://knime.org/node/v3.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://knime.org/node/v3.1 http://knime.org/node/v3.1.xsd">
	<name>Generic JavaScript View (JavaScript)</name>
	
	<shortDescription>
	    Executes JavaScript code to generate a view.
	</shortDescription>
	
	<fullDescription>
		<intro>		
    	    <p>Executes JavaScript code to generate a view. The code in the script editor is executed when displayed
            in the view (right-click -&gt; Interactive View) or in the KNIME server web portal. 
	       	</p>
            <p>Within the java script code block you have access to the input table and can use a set of predefined
            libraries to generate the view.</p>
            <p>Additionally you can export a static image to the workflow, if the view is generated as an SVG structure.</p>
            <p>
	        The node supports custom CSS styling. 
	        You can simply put CSS rules into a single string and set it as a flow variable 'customCSS' 
	        in the node configuration dialog.<br />
	        The style rules defined in such a way will override the style rules set in the node's dialog.<br/> 
	        You will find the list of available classes and their description on our <a href="https://knime.com/css-styling">documentation page</a>.
	        </p>     
		</intro>
		<tab name="JavaScript View">
		<option name="Maximum number of rows">
			<p>
				If a data table is connected at the input port a <i>knimeDataTable</i> object is automatically created and populated.
				Use this setting to limit the number of rows extracted. 
			</p>
		</option>
		<option name="Create template">
			<p>
				All node settings can be stored as a template, which will be available over the 'Templates' tab. See the tab description for more information.
			</p>
		</option>
		<option name="Sanitize input data">
			<p>
				Sanitizes the input table and available flow variables using a default policy defined by <a href="https://github.com/OWASP/java-html-sanitizer">OWASP</a>. 
			</p>
			<p>
				Set this option if the script assumes that the input table and used flow variables should be treated as strings or safe HTML strings.
			</p>
		</option>
		<option name="Flow Variables">
		    <p>
		      The list contains the flow variables that are currently available at the node input. Double 
		      clicking any of the entries will insert the respective identifier at the current cursor 
		      position in the JavaScript editor.
		    </p>
		    <p>
		    	Flow variable identifiers are replaced literally by their content during view generation. 
		    	In particular, this means that a string flow variable has to be wrapped in "" to use it as a 
		    	string in JavaScript, but a flow variable containing a JSON string can be used without the 
		    	need to parse the string in JavaScript.
		    </p>
		</option>
		<option name="Dependencies">
		    <p>
		      Choose from the list of available JavaScript library dependencies. Any entries selected here are available at 
		      runtime of the view. Note that this list will be expanded in the future.
		    </p>
		</option>
		<option name="CSS">
		    <p>Enter optional CSS instructions for styling the view.</p>
		    <p><b>Example</b></p>
		    <p>Change the standard font used for rendering for the whole document:</p>
		    <pre>html, body {font-family: sans-serif;}</pre>
		    <p>
		    	If this node is used to also generate an image, style rules defined here need to be present 
		    	in the svg as well. You can use a utility script in the image generation JavaScript to do so:		    	
		    </p>
		    <pre>knimeService.inlineSvgStyles(svgElement);</pre>
		</option>
		<option name="JavaScript">
			<p>Enter the JavaScript code to be executed. All HTML elements have to be created in the JavaScript and appended to 
			the <i>&lt;body&gt;</i> element.</p>
			<p>If data is available at the input port, a JavaScript object <i>knimeDataTable</i> is automatically created and populated.<br/>
			   The methods available on this object are:
			</p>
			<ul>
			   <li><i>knimeDataTable.getNumRows();</i> Retrieve the amount of rows contained in the table.</li>
			   <li><i>knimeDataTable.getNumColumns();</i> Retrieve the amount of columns contained in the table.</li>
			   <li><i>knimeDataTable.getColumnNames();</i> Retrieve the column names in a string array.</li>
			   <li><i>knimeDataTable.getColumnTypes();</i> Retrieve the converted JavaScript column types in a string array. These can be <i>Boolean</i>, 
			         <i>Number</i>, <i>String</i>, <i>SVG</i>, <i>PNG</i> or <i>Undefined</i>.</li>
			   <li><i>knimeDataTable.getPossibleValues();</i> Retrieve an array with possible values from the data table spec.</li>
			   <li><i>knimeDataTable.getRowColors();</i> Retrieve a string array with CSS-style color information for each row.</li>
			   <li><i>knimeDataTable.getRows();</i> Retrieve an array comprising all rows of the data table.</li>
			   <li><i>knimeDataTable.getColumn(columnID);</i> Retrieve an array of all values contained in the column with the given ID. Note that 
			         this operation can be computationally expensive as data is stored per row and has to be converted.</li>
			</ul>
			<p><b>Example</b></p>
			<p>Loop over all values contained in the table object and process only number types:</p>
			<pre>var rows = knimeDataTable.getRows();
for (var rowID = 0; rowID &lt; knimeDataTable.getNumRows(); rowID++) {
    var row = rows[rowID];
    for (var colID = 0; colID &lt; knimeDataTable.getNumColumns(); colID++) {
        if (knimeDataTable.getColumnTypes()[colID] === 'number') {
            var value = row.data[colID];
            // process value
        }
    }
}</pre>
		<p><b>View settings</b></p>
		<p>To save view settings you can use the automatically created <i>SETTINGS</i> object. This object can be stored temporarily and will be restored, when the view is opened again. Settings will be lost, when the node is reset.<br/>For example:</p>
		<pre>SETTINGS.mySetting = 4;</pre>
		</option>
		<option name="Output Flow Variables">
			<p>Define flow variables to output. The flow variables have to provide a default value, which is available after CONFIGURE and EXECUTE of the node.</p>
			<p>It is possible to use and define flow variable values in JavaScript. To do so use the automatically created <i>FLOW_VARIABLES</i> object. The appropriate object field is also automatically inserted in the JavaScript when double-clicking the <i>Script Field</i> cell in the table.</p>
			<p>It is important to assign values ccording to the specified flow variable type. For example:</p>
			<pre>FLOW_VARIABLES["new integer"] = 4;
FLOW_VARIABLES["new string"] = "sample";</pre>
			<p>Flow variables are only updated when the view is opened and the settings are applied. In the WebPortal this happens implicitly when a page is displayed and a user clicks the 'Next' button.<br/>They are restored, when a view is closed and opened again, but are reset to the default value on reset of the node.</p>
		</option>
		</tab>
		<tab name="Image Generation">
			<option name="Create SVG image at outport">
				<p>If an image is supposed to be rendered during execute for the outport. 
				Disable this option if image is not needed or creation is too time consuming.</p>
			</option>
			<option name="Additional wait time">
				<p>To compensate for initial layout delay or animation set an optional wait time in ms.
				This is time is added after the view initialization and before the image retrieval.</p>
			</option>
			<option name="SVG JavaScript">
				<p>Enter the JavaScript code to return the generated SVG as string.</p>
				<p><b>Example</b></p>
				<pre>var svgElement = document.getElementById("mySVG");
knimeService.inlineSvgStyles(svgElement);
return (new XMLSerializer()).serializeToString(svgElement);</pre>
			</option>
		</tab>
		<tab name="Templates">
		  <option name="">You can define reusable templates with the "Create templates..." button. Templates are stored
		  in the user's workspace by default and can be accessed via the "Templates" tab.</option>
		</tab>
	</fullDescription>
	
	<interactiveView name="Generic JavaScript View">
		The generic view executing the entered JavaScript.
	</interactiveView>
	<ports>
		<inPort index="0" name="Display data" optional="true">Data table with data to be converted in JavaScript object available to the view.</inPort>
		<outPort index="0" name="SVG Image">Generated SVG image if view implementation is producing and exporting it.</outPort>
		<outPort index="1" name="Flow Variables">All previously and during view generation defined flow variables.</outPort>
	</ports>	
</knimeNode>
